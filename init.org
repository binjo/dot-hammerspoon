#+property: header-args:lua :tangle init.lua
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src lua :exports none
-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at
-- https://github.com/binjo/dot-hammerspoon/blob/master/init.org
-- based on zzamboni's config, located at
-- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: My Hammerspoon config file
#+author: binjo

This is my [[http://www.hammerspoon.org/][Hammerspoon]] configuration file.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:init.lua][init.lua]] for the generated file. You can see this in a nicer format on my blog post [[http://zzamboni.org/post/my-hammerspoon-configuration-with-commentary/][My Hammerspoon Configuration, With Commentary]].

If you want to learn more about Hammerspoon, check out zzamboni's book [[https://leanpub.com/learning-hammerspoon][Learning Hammerspoon]]!

* Table of Contents :TOC_3:noexport:
- [[#general-variables-and-configuration][General variables and configuration]]
- [[#helper-functions][Helper functions]]
- [[#spoon-management][Spoon Management]]
- [[#window-and-screen-manipulation][Window and screen manipulation]]
- [[#organization-and-productivity][Organization and Productivity]]
- [[#seal][Seal]]
- [[#watchers][Watchers]]
- [[#loading-private-configuration][Loading private configuration]]
- [[#end-of-config-animation][End-of-config animation]]

* General variables and configuration

Global log level. Per-spoon log level can be configured in each =Install:andUse= block below.

#+begin_src lua
hs.logger.defaultLogLevel = "info"
#+end_src

I use =hyper= and =shift_hyper= as the modifiers for most of my key bindings, so I define them as variables here for easier referencing.

#+begin_src lua
hyper = {"cmd","alt","ctrl","shift"}
shift_hyper = {"cmd","alt","ctrl"}
#+end_src

Set up an abbreviation for hs.drawing.color.x11 since I use it repeatedly later on.
#+begin_src lua
col = hs.drawing.color.x11
#+end_src

* Helper functions

helper functions defined at front.

#+begin_src lua
function filter(func, tbl)
   local newtbl= {}
   for k,v in pairs(tbl) do
      if func(v) then
         table.insert(newtbl, v)
      end
   end
   return newtbl
end
#+end_src

* Spoon Management

Set up SpoonInstall - this is the only spoon that needs to be manually installed (it is already there if you check out this repository), all the others are installed and configured automatically.

#+begin_src lua
hs.loadSpoon("SpoonInstall")
#+end_src

I prefer sync notifications, makes them easier to read.

#+begin_src lua
spoon.SpoonInstall.use_syncinstall = true
#+end_src

This is just a shortcut to make the declarations below look more readable, i.e. =Install:andUse= instead of =spoon.SpoonInstall:andUse=.

#+begin_src lua
Install=spoon.SpoonInstall
#+end_src

* Window and screen manipulation

The [[http://www.hammerspoon.org/Spoons/WindowHalfsAndThirds.html][WindowHalfsAndThirds]] spoon sets up multiple key bindings for manipulating the size and position of windows.

#+begin_src lua
Install:andUse("WindowHalfsAndThirds",
               {
                 config = {
                   use_frame_correctness = true
                 },
                 hotkeys = 'default'
               }
)
#+end_src

* Organization and Productivity

The [[http://www.hammerspoon.org/Spoons/TextClipboardHistory.html][TextClipboardHistory]] spoon implements a clipboard history, only for text items. It is invoked with =Hyper-h=.

#+begin_src lua
Install:andUse("TextClipboardHistory",
               {
                 -- disable = false,
                 config = {
                   show_in_menubar = false,
                 },
                 hotkeys = {
                   toggle_clipboard = { hyper, "h" } },
                 start = true,
               }
)
#+end_src

* Seal

The [[http://www.hammerspoon.org/Spoons/Seal.html][Seal]] spoon is a powerhouse - it implements a Spotlight-like launcher, but which allows for infinite configurability of what can be done or searched from the launcher window. I use Seal as my default launcher, triggered with =Hyper-J=.

We start by loading the spoon, and specifying which plugins we want.

#+begin_src lua :noweb no-export
  Install:andUse("Seal",
                 {
                   hotkeys = { show = { hyper, "j" } },
                   fn = function(s)
                     s:loadPlugins({"apps", "calc", "safari_bookmarks", "screencapture", "useractions"})
                     s.plugins.safari_bookmarks.always_open_with_safari = false
                     s.plugins.useractions.actions =
                       {
                           <<useraction-definitions>>
                       }
                     s:refreshAllCommands()
                   end,
                   start = true,
                 }
  )
#+end_src

The =useractions= Seal plugin allows me to define my own shortcuts. For example, a bookmark to the Hammerspoon documentation page:

#+begin_src lua :tangle no :noweb-ref useraction-definitions
  ["Hammerspoon docs webpage"] = {
    url = "https://hammerspoon.org/docs/",
    icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),
  },
#+end_src

* Watchers

I use HHKB, different karabiner profiles needed when it get plugged in.

#+begin_src lua
usbWatcher = nil

function usbDeviceCallback(data)
    if (data["productName"] == "HHKB Professional") then
        if (data["eventType"] == "added") then
            hs.notify.new({title="Hammerspoon", informativeText="Hello HHKB"}):send()
            ok,result = hs.execute("/Library/Application\\ Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli --select-profile \"HHKB\"")
        elseif (data["eventType"] == "removed") then
            hs.notify.new({title="Hammerspoon", informativeText="Bye HHKB"}):send()
            ok,result = hs.execute("/Library/Application\\ Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli --select-profile \"Default\"")
            -- app:kill()
        end
    end
end

usbWatcher = hs.usb.watcher.new(usbDeviceCallback)
usbWatcher:start()
#+end_src

For some reason, Squirrel keeps messing my input methods when switching to applications.
#+begin_src lua
-- auto change the im for the application callback
apps = {
   {
      name = 'Emacs',
      im = 'EN'
   },
   {
      name = 'Google Chrome',
      im = 'EN'
   },
   {
      name = 'VMware',
      im = 'EN'
   },
   {
      name = 'iTerm',
      im = 'EN'
   },
   {
      name = 'Microsoft',
      im = 'EN'
   },
}

function ims(name, etype, app)
   if (etype == hs.application.watcher.activated) then
      config = filter(
         function(item)
            return string.match(name:lower(), item.name:lower())
         end,
         apps)

      if next(config) == nil then
      else
         local current = hs.keycodes.currentMethod()
         if (current == nil and string.match (config [1].im, "CN")) then
            hs.keycodes.setMethod("Squirrel")
         elseif (current ~= nil and string.match (config [1].im, "EN")) then
            hs.keycodes.setLayout("ABC - Extended")
         end
      end
   end
end

-- auto change the im for the application
imWatcher = hs.application.watcher.new(ims)
imWatcher:start()
#+end_src

* Loading private configuration

In =init-local.lua= I keep experimental or private stuff (like API tokens) that I don't want to publish in my main config. This file is not committed to any publicly-accessible git repositories.

#+begin_src lua
local localfile = hs.configdir .. "/init-local.lua"
if hs.fs.attributes(localfile) then
  dofile(localfile)
end
#+end_src

* End-of-config animation

The [[http://www.hammerspoon.org/Spoons/FadeLogo.html][FadeLogo]] spoon simply shows an animation of the Hammerspoon logo to signal the end of the config load.

#+begin_src lua
-- Install:andUse("FadeLogo",
--                {
--                  config = {
--                    default_run = 1.0,
--                  },
--                  start = true
--                }
-- )
#+end_src

If you don't want to use FadeLogo, you can have a regular notification.

#+begin_src lua
hs.notify.show("Welcome to Hammerspoon", "Have fun!", "")
#+end_src
